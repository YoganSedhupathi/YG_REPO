/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.9
 * Generated at: 2024-07-19 08:16:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class IncomeReport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE HTML>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r\n");
      out.write("  <title>Referral Report</title>\r\n");
      out.write("</head>\r\n");
String mode=request.getParameter("mode");
String code=request.getParameter("code");
String userId=(String)session.getAttribute("LOGIN_ID");
String rptType=request.getParameter("type");
String reportName="Income Statement - Daywise";

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"card border-0 shadow\">\r\n");
      out.write("		<div class=\"card-body lpage\">\r\n");
      out.write("			<div class=\"row w-100\">\r\n");
      out.write("				<div class=\"col-md-6 d-flex align-items-center\">\r\n");
      out.write("					<h4 class=\"header-title\">");
      out.print(reportName);
      out.write("</h4>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div class=\"row \" id=\"jqcontainer\" style=\"display:none\"> <div class=\"table-container\" > <div id=\"xyz\" class=\"w-100\"></div></div></div>	\r\n");
      out.write("			<div id=\"callback\"  >\r\n");
      out.write("				\r\n");
      out.write("			<div class=\"table-container\">\r\n");
      out.write("				<div class=\"row w-100 ml-8\">\r\n");
      out.write("					<div class=\"col-sm-6 col-md-6 col-lg-6\">    \r\n");
      out.write("\r\n");
      out.write("						<div class=\"form-group mbotto\">\r\n");
      out.write("							<div class=\"col-md-2\"><label>From</label></div>\r\n");
      out.write("							<div class=\"col-md-10\"><input type=\"text\" class=\"form-control\" id=\"fromdate\"></div>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"form-group mbotto\">\r\n");
      out.write("							<div class=\"col-md-2\"><label>To </label></div>\r\n");
      out.write("							<div class=\"col-md-10\"><input type=\"text\" class=\"form-control\" id=\"todate\"></div>\r\n");
      out.write("						</div>\r\n");
      out.write("\r\n");
      out.write("					</div>                    \r\n");
      out.write("					\r\n");
      out.write("				</div>\r\n");
      out.write("			   \r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<div class=\"row w-100 mt-3\">\r\n");
      out.write("				<div class=\"col-md-3\">\r\n");
      out.write("				  <div class=\"hstack justify-content-start\">\r\n");
      out.write("					<div id=\"actButton\">\r\n");
      out.write("						<button id=\"btnGo\" class=\"btn btn-primary priBut\" type=\"button\" onclick=\"reportGo()\">Summary</button>\r\n");
      out.write("					</div>\r\n");
      out.write("				  </div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>	\r\n");
      out.write("			   \r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("	$('#btnGo').text(\"Go\");\r\n");
      out.write("	$('#fromdate').datepicker({\r\n");
      out.write("				 language: \"en\",\r\n");
      out.write("       			 autoclose: true,\r\n");
      out.write("       			 todayHighlight: true,\r\n");
      out.write("	 	 	     format:'dd/mm/yyyy'\r\n");
      out.write("		});\r\n");
      out.write("	if($('#fromdate').val()==\"\"){\r\n");
      out.write("		var cd=new Date();\r\n");
      out.write("		$('#fromdate').datepicker(\"setDate\",cd);\r\n");
      out.write("	}\r\n");
      out.write("	$('#todate').datepicker({\r\n");
      out.write("				 language: \"en\",\r\n");
      out.write("       			 autoclose: true,\r\n");
      out.write("       			 todayHighlight: true,\r\n");
      out.write("	 	 	     format:'dd/mm/yyyy'\r\n");
      out.write("		});		\r\n");
      out.write("	if($('#todate').val()==\"\"){\r\n");
      out.write("		var cd=new Date();\r\n");
      out.write("		$('#todate').datepicker(\"setDate\",cd);\r\n");
      out.write("	}\r\n");
      out.write("	function reportGo(){\r\n");
      out.write("		$.ajax({\r\n");
      out.write("		            url: \"/waggle/service/account/bills/dayend?branch=1\",\r\n");
      out.write("        		    type: \"GET\",\r\n");
      out.write("	        	    async: false,\r\n");
      out.write("	        	    contentType:\"application/json\",\r\n");
      out.write("		            dataType: \"json\",\r\n");
      out.write("        		    success: function (r) {\r\n");
      out.write("						\r\n");
      out.write("	            	}\r\n");
      out.write("        });\r\n");
      out.write("    	var url=\"\";\r\n");
      out.write("		url=\"/waggle/service/account/incomestatement?fromdate=\"+$('#fromdate').val()+\"&todate=\"+$('#todate').val();\r\n");
      out.write("		window.open(url,\"_blank\");		\r\n");
      out.write("	}	\r\n");
      out.write("  </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
