/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.9
 * Generated at: 2024-07-19 08:16:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class screens_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE HTML>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r\n");
      out.write("  <title></title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<script>\r\n");
      out.write("		");

	String screencode=(String)request.getParameter("screencode");
	String rptTitle=(String)request.getParameter("title");
		
      out.write("\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("<div class=\"card border-0 shadow\">\r\n");
      out.write("<div class=\"card-body lpage fsize\">\r\n");
      out.write("	<div class=\"row w-100 mb-3\">\r\n");
      out.write("		<div class=\"col-md-6 d-flex align-items-center\">\r\n");
      out.write("            <h4 class=\"header-title\">");
      out.print(rptTitle);
      out.write("</h4>\r\n");
      out.write("        </div>\r\n");
      out.write("		<div  class=\"col-md-6 text-right\" id=\"addGrp\"></div>\r\n");
      out.write("		<div  class=\"col-md-6 text-right\" id=\"saveGrp\" style='display:none'>\r\n");
      out.write("			<div class=\"mb-3\">\r\n");
      out.write("				<button type=\"button\" class=\"btn btn-edit\" onclick='onSaveClicked()'><span class=\"mdi mdi-check-circle-outline me-2\"></span>Save</button>\r\n");
      out.write("				<button type=\"button\" class=\"btn btn-clear mx-3\" onclick='hideMasterData()'><span class=\"mdi mdi-refresh me-2\"></span>Cancel</button>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class=\"row \" id=\"jqcontainer\" >\r\n");
      out.write("	  <div class=\"table-container\" >\r\n");
      out.write("	     <div id=\"xyz\" class=\"w-100\"></div>\r\n");
      out.write("	  </div>\r\n");
      out.write("	</div>	\r\n");
      out.write("\r\n");
      out.write("	 <div id=\"callback\" style=\"display:none\" >	\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("  var masters=new FlexUI.ConstructScreen(");
      out.print(screencode);
      out.write(",\"addGrp\",\"\",\"callback\");\r\n");
      out.write("  masters.buildScreen();\r\n");
      out.write("  jqReport(");
      out.print(screencode);
      out.write(",\"#xyz\");\r\n");
      out.write("  function addMasterData(){ \r\n");
      out.write("  	masters.clearScreen();\r\n");
      out.write("  	masters.enableDisableOperatingFields(\"ADD\");\r\n");
      out.write("  	$('#callback').css('display','block');\r\n");
      out.write("  	$('#saveGrp').css('display','block');\r\n");
      out.write("  	$('#history').css('display','block');\r\n");
      out.write("  	$('#addGrp').css('display','none');\r\n");
      out.write("	$('#jqcontainer').css('display','none');\r\n");
      out.write("  	$('#xyz').css('display','none');\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  function hideMasterData(){\r\n");
      out.write("  	$('#callback').css('display','none');\r\n");
      out.write("  	$('#saveGrp').css('display','none');\r\n");
      out.write("  	$('#history').css('display','none');\r\n");
      out.write("  	$('#addGrp').css('display','block');\r\n");
      out.write("	$('#jqcontainer').css('display','block');\r\n");
      out.write("  	$('#xyz').css('display','block');\r\n");
      out.write("  }\r\n");
      out.write("    \r\n");
      out.write("  function toggleHeaderRow(){\r\n");
      out.write("  	toggleSearchToolBar(");
      out.print(screencode);
      out.write(");\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  toggleHeaderRow();\r\n");
      out.write("  \r\n");
      out.write("  function onSaveClicked(id,me){\r\n");
      out.write("		var r=masters.saveData();\r\n");
      out.write("		var code=screenObjects.getScreenObject(\"code\").getValue();\r\n");
      out.write("		if(r.result==\"Success\"){\r\n");
      out.write("			if(code!=0){\r\n");
      out.write("				setErrorMessage(r.message+\" [No:\"+code+\"]\")   ;\r\n");
      out.write("			}else{\r\n");
      out.write("				setErrorMessage(r.message+\" [No:\"+r.code+\"]\") ;\r\n");
      out.write("			}\r\n");
      out.write("			masters.clearScreen();\r\n");
      out.write("			hideMasterData();\r\n");
      out.write("			reloadGrid(");
      out.print(screencode);
      out.write(");\r\n");
      out.write("			return r.key;			\r\n");
      out.write("		}else{\r\n");
      out.write("			setErrorMessage(r.message);\r\n");
      out.write("			// setErrorMessage(\"The Value you entered is already in use. Please try a different value\");		\r\n");
      out.write("		}\r\n");
      out.write("		return 0;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("  function loadOrderData(url,code,did){\r\n");
      out.write("  	showLoader();\r\n");
      out.write("	masters.clearScreen();\r\n");
      out.write("	masters.enableDisableOperatingFields(\"EDIT\");\r\n");
      out.write("	masters.setOperation(\"MOD\");\r\n");
      out.write("	var l=new FlexUI.Ajax();\r\n");
      out.write("	var v=l.callAjax(\"GET\",url,\"&screencode=");
      out.print(screencode);
      out.write("\");	\r\n");
      out.write("	masters.loadScreen(v);\r\n");
      out.write("	$('#callback').css('display','block');\r\n");
      out.write("  	$('#saveGrp').css('display','block');\r\n");
      out.write("  	$('#history').css('display','block');\r\n");
      out.write("	$('#jqcontainer').css('display','none');\r\n");
      out.write("  	$('#addGrp').css('display','none');\r\n");
      out.write("  	$('#xyz').css('display','none');\r\n");
      out.write("  	hideLoader();\r\n");
      out.write("  }\r\n");
      out.write("  function branchValidation(){\r\n");
      out.write("  	return true;\r\n");
      out.write("  }\r\n");
      out.write("//   $('input[type=text]').tooltip({\r\n");
      out.write("//   	trigger:\"focus\"\r\n");
      out.write("//   });\r\n");
      out.write("</script> \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
